//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAppEmployeesV2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class GlobalGioEntities : DbContext
    {
        public GlobalGioEntities()
            : base("name=GlobalGioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ContractType> ContractTypes { get; set; }
        public DbSet<Employee> Employees { get; set; }
    
        public virtual int GetEmployees(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployees", idParameter);
        }
    
        public virtual int SaveEmployee(string name, string lastName, Nullable<int> typeContract, string hourSalary, string monthSalary)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var typeContractParameter = typeContract.HasValue ?
                new ObjectParameter("typeContract", typeContract) :
                new ObjectParameter("typeContract", typeof(int));
    
            var hourSalaryParameter = hourSalary != null ?
                new ObjectParameter("HourSalary", hourSalary) :
                new ObjectParameter("HourSalary", typeof(string));
    
            var monthSalaryParameter = monthSalary != null ?
                new ObjectParameter("MonthSalary", monthSalary) :
                new ObjectParameter("MonthSalary", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveEmployee", nameParameter, lastNameParameter, typeContractParameter, hourSalaryParameter, monthSalaryParameter);
        }
    }
}
